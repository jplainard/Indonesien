// Test de l'API d'authentification IndoFrench
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function testAuth() {
  try {
    console.log('üîê Test du syst√®me d\'authentification IndoFrench\n');

    // V√©rifier la connexion √† la base de donn√©es
    console.log('üì° Connexion √† la base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie\n');

    // Cr√©er un utilisateur de test
    console.log('üë§ Cr√©ation d\'un utilisateur de test...');
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: 'test@indofrench.com' }
    });

    if (existingUser) {
      console.log('‚ö†Ô∏è  Utilisateur de test existe d√©j√†');
      
      // Supprimer l'utilisateur existant
      await prisma.user.delete({
        where: { email: 'test@indofrench.com' }
      });
      console.log('üóëÔ∏è  Utilisateur existant supprim√©');
    }

    // R√©cup√©rer ou cr√©er le r√¥le utilisateur
    let userRole = await prisma.role.findFirst({
      where: { name: 'utilisateur' }
    });

    if (!userRole) {
      userRole = await prisma.role.create({
        data: {
          name: 'utilisateur',
          description: 'Utilisateur standard'
        }
      });
      console.log('üìù R√¥le utilisateur cr√©√©');
    }

    // Cr√©er l'utilisateur de test
    const hashedPassword = await bcrypt.hash('password123', 12);
    
    const testUser = await prisma.user.create({
      data: {
        email: 'test@indofrench.com',
        password: hashedPassword,
        name: 'Utilisateur Test',
        roleId: userRole.id
      },
      include: {
        role: true
      }
    });

    console.log('‚úÖ Utilisateur de test cr√©√© avec succ√®s:');
    console.log(`   Email: ${testUser.email}`);
    console.log(`   Nom: ${testUser.name}`);
    console.log(`   R√¥le: ${testUser.role.name}`);
    console.log(`   ID: ${testUser.id}\n`);

    // Test de connexion API
    console.log('üîê Test de l\'API de connexion...');
    
    const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@indofrench.com',
        password: 'password123'
      }),
    });

    const loginData = await loginResponse.json();
    
    if (loginResponse.ok) {
      console.log('‚úÖ Connexion API r√©ussie');
      console.log(`   Utilisateur: ${loginData.user.name}`);
      console.log(`   Email: ${loginData.user.email}`);
      console.log(`   R√¥le: ${loginData.user.role}\n`);
    } else {
      console.log('‚ùå Erreur de connexion API:', loginData.error);
    }

    console.log('üéâ Test termin√© avec succ√®s !');
    console.log('\nüìã Informations de connexion:');
    console.log('   Email: test@indofrench.com');
    console.log('   Mot de passe: password123');
    console.log('   URL: http://localhost:3001/auth');

  } catch (error) {
    console.error('‚ùå Erreur pendant le test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testAuth();
